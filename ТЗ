Техническое задание: Разработка игры “Shooter” на Pygame
1. Цель проекта:
Разработать двухмерную игру “Shooter” с использованием библиотеки Pygame, в которой игрок управляет персонажем, стреляет по врагам (мобам), избегая столкновений со стенами и врагами.
2. Функциональные требования:
    • Игровой процесс:
        ◦ Игрок управляет персонажем с помощью стрелок на клавиатуре.
        ◦ Игрок стреляет по мобам с помощью кликов мыши.
        ◦ Пули летят по направлению к цели.
        ◦ Мобы движутся в направлении игрока.
        ◦ Мобы и стены имеют прямоугольную форму (collision boxes).
        ◦ Игрок получает урон при столкновении с мобами.
        ◦ Игра заканчивается при достижении нуля очков здоровья игроком или по истечении таймера.
        ◦ Игра выигрывается при достижении таймера.
    • Мобы:
        ◦ Мобы появляются на экране через определенные промежутки времени.
        ◦ Мобы имеют очки здоровья (HP).
        ◦ Мобы исчезают после получения определенного урона.
        ◦ Мобов должно быть несколько одновременно.
        ◦ Моби имеют два типа (красный и синий).
        ◦ Игрок может замораживать мобов определенного типа с помощью клавиш “Q” и “E” (с кулдауном 2 секунды). Заморозка длится 3 секунды.
    • Пули:
        ◦ Пули имеют ограниченный радиус действия.
        ◦ Пули наносят урон мобам при столкновении.
        ◦ Пули исчезают после прохождения определенного расстояния или столкновения с мобом.
    • Стены:
        ◦ Стены размещаются на экране случайным образом.
        ◦ Игрок не может проходить через стены.
    • Интерфейс пользователя (UI):
        ◦ Отображение очков здоровья (HP) игрока.
        ◦ Отображение таймера игры.
        ◦ Кнопки в главном меню (Start, Settings, Exit).
        ◦ Кнопки в меню настроек.
        ◦ Экран Game Over (с сообщением о проигрыше и кнопкой “Play Again”).
        ◦ Экран победы (с сообщением о победе и кнопкой “Play Again”).
    • Звуковое сопровождение (необязательно):
        ◦ Звуки выстрелов.
        ◦ Звуки столкновений.
        ◦ Фоновая музыка.
    • Настройки: (минимум)
        ◦ Возможность изменить громкость звука.
3. Нефункциональные требования:
    • Производительность: Игра должна работать плавно на большинстве современных компьютеров.
    • Удобство использования: Интерфейс должен быть интуитивно понятен.
    • Надежность: Игра должна быть устойчива к ошибкам и сбоям.
    • Портативность: Игра должна работать на платформе Windows.
4. Архитектура:
Игра будет разработана с использованием модульного подхода. Основные модули:
    • assets.py: Хранение констант (цвета, пути к изображениям).
    • config.py: Настройки игры.
    • Sprites: Классы для игровых объектов (игрок, мобы, пули, стены).
    • screens: Классы для различных экранов игры (главное меню, игровой экран, экран Game Over).
    • SpriteHub: Менеджер спрайтов.
    • Updater: Обновление игрового состояния и логики.
    • SceneHub: Управление переходами между экранами.
    • main.py: Основной цикл игры.
5. Тестирование:
Необходимо провести модульное тестирование отдельных компонентов игры, а также интеграционное тестирование всей системы. Тестирование должно включать проверку функциональности всех элементов игры, обработку ошибок и производительность.
6. Сроки и ресурсы:
(Указать предполагаемые сроки разработки и необходимые ресурсы: программное обеспечение, компетенции разработчиков и т.д.)
7. Дополнительные замечания:
    • Необходимо разработать качественный и удобный пользовательский интерфейс.
    • Следует обратить внимание на баланс игры (урон, здоровье, скорость).
    • Важно обеспечить плавную работу игры и отсутствие лагов.
